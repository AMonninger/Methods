;;; 2017-02-06: CDC file to which emacs on macs should link

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(load "/Volumes/Sync/Lib/config/emacs/dotemacs-all")

(setq TeX-output-view-style (quote (("^dvi$" "^xdvi$" "open-x11 %(o?)xdvi %dS %d") ("^dvi$" "^TeXniscope$" "open -a TeXniscope.app %o") ("^pdf$" "." "open -a Skim.app -synctex=1 %O %S") ("^html?$" "." "open %o"))))
(setq preview-LaTeX-command (quote ("%`%l \"\\nonstopmode\\nofiles\\PassOptionsToPackage{" "bigWide" ("," . preview-required-option-list) "}{preview}\\AtBeginDocument{\\ifx\\ifPreview\\undefined" preview-default-preamble "\\fi}\"%' %t")))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Buffer-menu-buffer+size-width 40)
 '(TeX-command-list
   (quote
    (("TeX" "%(PDF)%(tex) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
      (plain-tex-mode texinfo-mode ams-tex-mode)
      :help "Run plain TeX")
     ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil
      (latex-mode doctex-mode)
      :help "Run LaTeX")
     ("Makeinfo" "makeinfo %t" TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with Info output")
     ("Makeinfo HTML" "makeinfo --html %t" TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with HTML output")
     ("AmSTeX" "%(PDF)amstex %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
      (ams-tex-mode)
      :help "Run AMSTeX")
     ("ConTeXt" "texexec --once --texutil %(execopts)%t" TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt once")
     ("ConTeXt Full" "texexec %(execopts)%t" TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt until completion")
     ("BibTeX" "bibtex %s" TeX-run-BibTeX nil t :help "Run BibTeX")
     ("View" "open -a TeXShop.app %s.pdf" TeX-run-command t t :help "Run Text viewer")
     ("Print" "%p" TeX-run-command t t :help "Print the file")
     ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command)
     ("File" "%(o?)dvips %d -o %f " TeX-run-command t t :help "Generate PostScript file")
     ("Index" "makeindex %s" TeX-run-command nil t :help "Create index file")
     ("Check" "lacheck %s" TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for correctness")
     ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document")
     ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files")
     ("Clean All" "(TeX-clean t)" TeX-run-function nil t :help "Delete generated intermediate and output files")
     ("Other" "" TeX-run-command t t :help "Run an arbitrary command"))))
 '(buffer-menu-buffer+size-width 40)
 '(case-fold-search nil)
 '(csv-separators (quote ("," "&")))
 '(fill-column 126)
 '(gud-gdb-command-name "gdb --annotate=1")
 '(large-file-warning-threshold nil)
 '(org-export-with-sub-superscripts nil)
 '(package-selected-packages
   (quote
    (csv tablist yasnippet shell-here auctex paradox cl-lib leanote gmail-message-mode markdown-preview-mode markdown-mode pbcopy magit-gh-pulls color-theme)))
 '(paradox-automatically-star t)
 '(safe-local-variable-values (quote ((TeX-parse-self . t)))))

; list the packages you want
(setq package-list '(pbcopy yasnippet tablist color-theme async)) ;; when an item is put in the emacs kill ring, also put it on Mac clipboard

; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(require 'pbcopy)
(turn-on-pbcopy)

;;; Define 'O' (capital letter O) command in dired mode for invoking MacOS "open" command on selected file in dired
(define-key dired-mode-map "O" 'dired-open-mac)
(defun dired-open-mac ()
   (interactive)
   (let ((file-name (dired-get-file-for-visit)))
     (if (file-exists-p file-name)
         (shell-command (concat "open '" file-name "'" nil )))))

;; Open a new terminal window at the current directory being browsed
;; From http://truongtx.me/2013/09/13/emacs-dired-new-terminal-window-at-current-directory-on-macos/

;; default terminal application path
(defvar tmtxt/macos-default-terminal-app-path
	"/Applications/Utilities/Terminal.app" "The default path to terminal application in MacOS")
;;; function to open new terminal window at current directory
  (defun tmtxt/open-current-dir-in-terminal ()
	"Open current directory in dired mode in terminal application.
For MacOS only"
	(interactive)

	(shell-command (concat "open -a "
						   (shell-quote-argument tmtxt/macos-default-terminal-app-path)
						   " "
						   (shell-quote-argument (file-truename default-directory)))))

(define-key dired-mode-map (kbd "C-x t") 'tmtxt/open-current-dir-in-terminal)
(global-set-key "\C-xt" 'tmtxt/open-current-dir-in-terminal)

(if (file-exists-p "~/.emacs-thisUser")
  (load "~/.emacs-thisUser")
)


;; (require 'mu4e)

;; sending mail -- replace USERNAME with your gmail username
;; also, make sure the gnutls command line utils are installed
;; package 'gnutls-bin' in Debian/Ubuntu

(require 'smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
   starttls-use-gnutls t
   smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
   smtpmail-auth-credentials
     '(("smtp.gmail.com" 587 "USERNAME@gmail.com" nil))
   smtpmail-default-smtp-server "smtp.gmail.com"
   smtpmail-smtp-server "smtp.gmail.com"
   smtpmail-smtp-service 587)

;; alternatively, for emacs-24 you can use:
;;(setq message-send-mail-function 'smtpmail-send-it
;;     smtpmail-stream-type 'starttls
;;     smtpmail-default-smtp-server "smtp.gmail.com"
;;     smtpmail-smtp-server "smtp.gmail.com"
;;     smtpmail-smtp-service 587)

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(global-set-key (kbd "\C-x^") 'overwrite-mode)

;; Set default to ignore case when sorting 
(setq sort-fold-case t)


;;; From http://www.emacswiki.org/emacs/UnfillParagraph
;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
        (defun unfill-paragraph (&optional region)
	      "Takes a multi-line paragraph and makes it into a single line of text."
	            (interactive (progn (barf-if-buffer-read-only) '(t)))
		          (let ((fill-column (point-max)))
			          (fill-paragraph nil region)))

;; Handy key definition
        (define-key global-map "\M-Q" 'unfill-paragraph)
	;;; 2014-11-01: CDC preferences for emacs on all systems
;;; Inhibit annoying startup message
(setq inhibit-startup-message t)


(defun CDC-load-economicsbib ()
   (interactive "*")
   (find-file "/Volumes/Sync/Dropbox/Sys/Config/texlive/texmf-cdcpublicuse/bibtex/bib/economics.bib")
)

(global-set-key "\C-xl" 'CDC-load-economicsbib)

(defun CDC-load-econtexSetup ()
   (interactive "*")
   (find-file "/Volumes/Sync/Dropbox/Sys/Config/texlive/texmf-cdcpublicuse/tex/latex/econtexSetup.sty")
)

(global-set-key "\C-xs" 'CDC-load-econtexSetup)

(defun CDC-load-sHortcuts ()
   (interactive "*")
   (find-file "/Volumes/Sync/Dropbox/Sys/Config/texlive/texmf-cdcpublicuse/tex/latex/CDCShortcuts.sty")
)

(global-set-key "\C-xh" 'CDC-load-sHortcuts)


;;; Customize GUD debugger: https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html
