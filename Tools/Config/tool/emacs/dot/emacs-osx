;;; 2017-12-03: Add the flymd package, which produces a live-updating version of the Markdown document you are editing
;;; 2017-12-03: Configure markdown-mode so that it compiles using /Methods/Tools/Install/Software/markdown-preview-gfm/flavor.rb which renders github-flavored Markdown (allowing tables)
;;; 2017-12-02: Fix the fact that GUI emacs did not get the same PATH as terminal; see https://github.com/purcell/exec-path-from-shell
;;; 2017-10-08: Add git and gist to default packages
;;; 2017-02-06: CDC file to which emacs on macs should link
;;; 2017-08-24: Fix failure to correctly load TeX-latex-mode automatically 

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.


;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(load "/Volumes/Sync/Lib/config/emacs/dot/emacs-all")

(when (>= emacs-major-version 24) ;; version 24 introduced the package manager
  (require 'package)
  (append-to-list 'package-list '(auctex shell-here org csv-mode git markdown-mode pbcopy yasnippet async git gist exec-path-from-shell flymd))

  ;; fetch the list of packages available
  (unless package-archive-contents
    (package-refresh-contents))

  ;; install any missing packages
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))
  ) ;; end when (>= emacs-major-version 24)


;; Make the mouse work in iTerm emacs
(require 'mwheel)
(require 'mouse)
(xterm-mouse-mode t)
(mouse-wheel-mode t)
(global-set-key [mouse-4] 'next-line)
(global-set-key [mouse-5] 'previous-line)

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

(defun my-flymd-browser-function (url)
  (let ((process-environment (browse-url-process-environment)))
    (apply 'start-process
           (concat "firefox " url)
           nil
           "/usr/bin/open"
           (list "-a" "firefox" url))))
(setq flymd-browser-open-function 'my-flymd-browser-function)

;;; (setq markdown-command "/Methods/Tools/Install/Software/markdown-preview-gfm/flavor.rb")

(require 'pbcopy) ;; when an item is put in the emacs kill ring, also put it on Mac clipboard
(turn-on-pbcopy) 

(menu-bar-mode -1) ;; The menu bar doesn't work without further configuration on MacOS terminal, so just hide it

;; default terminal application path
(defvar tmtxt/macos-default-terminal-app-path
  "/Applications/Utilities/Terminal.app" "The default path to terminal application in MacOS")

;;; Define 'O' (capital letter O) command in dired mode for invoking MacOS "open" command on selected file in dired
(define-key dired-mode-map "O" 'dired-open-mac)
(defun dired-open-mac ()
  (interactive)
  (let ((file-name (dired-get-file-for-visit)))
    (if (file-exists-p file-name)
	(shell-command (concat "open '" file-name "'" nil )))))

;; Open a new terminal window whose shell directory is at the current directory being browsed
;; From http://truongtx.me/2013/09/13/emacs-dired-new-terminal-window-at-current-directory-on-macos/

(defun tmtxt/open-current-dir-in-terminal ()
  "Open current directory in dired mode in terminal application.  For MacOS only"
  (interactive)

  (shell-command (concat "open -a "
			 (shell-quote-argument tmtxt/macos-default-terminal-app-path)
			 " "
			 (shell-quote-argument (file-truename default-directory)))))

(define-key dired-mode-map (kbd "C-x t") 'tmtxt/open-current-dir-in-terminal)
(global-set-key "\C-xt" 'tmtxt/open-current-dir-in-terminal)

(if (file-exists-p "~/.emacs-thisUser")
    (load "~/.emacs-thisUser")
  )

(global-set-key (kbd "\C-x^") 'overwrite-mode)

;; Set default to ignore case when sorting 
(setq sort-fold-case t)

(setq-default fill-column 10000) ; when used with M-q or M-x fill-paragraph, removes linebreaks within paragraph

(shell)
(setq economics-bib-path "")

(defun CDC-load-economicsbib ()
  (interactive "*")
  (setq economics-bib-path-from-kpsewhich
	(shell-command-to-string "kpsewhich economics.bib")
	)
  (if (string= "" economics-bib-path-from-kpsewhich) ; if-part
      (message "kpsewhich economics.bib returns nothing, so key binding does not autoload anything") ; then-part
    (setq economics-bib-path (substring
			  economics-bib-path-from-kpsewhich
			  0 -1)
	  )
    ) ; if-then-else-end
    (find-file economics-bib-path)
) ; defun end

    
;; (defun CDC-load-economicsbib ()
;;   (interactive "*")
;;   (find-file "/Volumes/Sync/Dropbox/Sys/Config/texlive/texmf-cdcpublicuse/bibtex/bib/economics.bib")
;;   )

(global-set-key "\C-xl" 'CDC-load-economicsbib)

(defun CDC-load-econtexSetup ()
  (interactive "*")
  (find-file "/Volumes/Sync/Dropbox/Sys/Config/texlive/texmf-cdcpublicuse/tex/latex/econtexSetup.sty")
  )

(global-set-key "\C-xs" 'CDC-load-econtexSetup)

(defun CDC-load-sHortcuts ()
  (interactive "*")
  (find-file "/Volumes/Sync/Dropbox/Sys/Config/texlive/texmf-cdcpublicuse/tex/latex/CDCShortcuts.sty")
  )

(global-set-key "\C-xh" 'CDC-load-sHortcuts)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Buffer-menu-name-width 30)
 '(TeX-command-list
   (quote
    (("TeX" "%(PDF)%(tex) %(file-line-error) %(extraopts) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
      (plain-tex-mode texinfo-mode ams-tex-mode)
      :help "Run plain TeX")
     ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil
      (latex-mode doctex-mode)
      :help "Run LaTeX")
     ("Makeinfo" "makeinfo %(extraopts) %t" TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with Info output")
     ("Makeinfo HTML" "makeinfo %(extraopts) --html %t" TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with HTML output")
     ("AmSTeX" "amstex %(PDFout) %(extraopts) %`%S%(mode)%' %t" TeX-run-TeX nil
      (ams-tex-mode)
      :help "Run AMSTeX")
     ("ConTeXt" "%(cntxcom) --once --texutil %(extraopts) %(execopts)%t" TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt once")
     ("ConTeXt Full" "%(cntxcom) %(extraopts) %(execopts)%t" TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt until completion")
     ("BibTeX" "bibtex %s" TeX-run-BibTeX nil t :help "Run BibTeX")
     ("View" "open -a TeXShop.app %s.pdf" TeX-run-command t t :help "Run Text viewer")
     ("Print" "%p" TeX-run-command t t :help "Print the file")
     ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command)
     ("File" "%(o?)dvips %d -o %f " TeX-run-dvips t t :help "Generate PostScript file")
     ("Dvips" "%(o?)dvips %d -o %f " TeX-run-dvips nil t :help "Convert DVI file to PostScript")
     ("Ps2pdf" "ps2pdf %f" TeX-run-ps2pdf nil t :help "Convert PostScript file to PDF")
     ("Index" "makeindex %s" TeX-run-index nil t :help "Run makeindex to create index file")
     ("Xindy" "texindy %s" TeX-run-command nil t :help "Run xindy to create index file")
     ("Check" "lacheck %s" TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for correctness")
     ("ChkTeX" "chktex -v6 %s" TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for common mistakes")
     ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document")
     ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files")
     ("Clean All" "(TeX-clean t)" TeX-run-function nil t :help "Delete generated intermediate and output files")
     ("Other" "" TeX-run-command t t :help "Run an arbitrary command"))))
 '(case-fold-search t)
 '(csv-separators (quote ("," "|")))
 '(package-selected-packages
   (quote
    (flymd exec-path-from-shell csv gited git-lens git-commit gist git bind-key free-keys yasnippet tablist shell-here pbcopy markdown-mode magit-gh-pulls csv-mode color-theme auctex async)))
 '(safe-local-variable-values (quote ((TeX-auto-save . t) (TeX-parse-self . t)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(put 'downcase-region 'disabled nil)
