;;; http://emacsredux.com/blog/2013/03/27/indent-region-or-buffer/

(defun indent-buffer ()
  "Indent the currently visited buffer."
  (interactive)
  (indent-region (point-min) (point-max)))

(defun indent-region-or-buffer ()
  "Indent a region if selected, otherwise the whole buffer."
  (interactive)
  (save-excursion
    (if (region-active-p)
        (progn
          (indent-region (region-beginning) (region-end))
          (message "Indented selected region."))
      (progn
        (indent-buffer)
        (message "Indented buffer.")))))

(global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)

;;; 2017-04-28: Updated for Methods class
;;; 2017-05-30: Display full file path in frame title, only works in Xterm (not Terminal.app)

(setq-default frame-title-format "%b (%f)")
(when (string= system-type "darwin")
  (setq dired-use-ls-dired nil)) ;;; Inhibit annoying error message if running on MacOS
(setq inhibit-startup-message t) ;;; Inhibit annoying startup message
(require 'dired-x)
;;; (require 'git)

;;; (process-kill-without-query (get-process "shell"))

;;; Match words across line breaks
;;; https://emacs.stackexchange.com/questions/10582/search-for-string-ignoring-new-lines

(setq isearch-lax-whitespace t)
(setq isearch-regexp-lax-whitespace t)
(setq search-whitespace-regexp "[ \t\r\n]+")

(setq case-fold-search t)

(setq delete-by-moving-to-trash t)
(setq dired-recursive-deletes t)

(when (>= emacs-major-version 24) ;; version 24 introduced the package manager 
  (require 'package)
  (add-to-list 'package-archives '("elpa"         . "http://elpa.gnu.org/elpa/")           t)
  (add-to-list 'package-archives '("melpa"        . "http://melpa.org/packages/")        t)
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/")   t)
  (add-to-list 'package-archives '("marmalade"    . "http://marmalade-repo.org/packages/") t)
  (add-to-list 'package-archives '("org"          . "http://orgmode.org/elpa/")            t)
  (package-initialize)

  ;; list the packages you want
  (setq package-list '(auctex shell-here org csv-mode markdown-mode git))

  ;; fetch the list of packages available
  (unless package-archive-contents
    (package-refresh-contents))

  ;; install the missing packages
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))

  ;; https://github.com/ieure/shell-here
  ;; Open a shell buffer in (or relative to) default-directory, e.g. whatever directory the current buffer is in.
  (require 'shell-here)
  (define-key (current-global-map) "\C-c!" 'shell-here)

  ) ;; end when (>= emacs-major-version 24)

;;; Make sure the parens bounce back to show you where start and end points are
'(show-paren-mode t)

;; 2015-01-20: Copy full path of filename selected in dired onto the keyboard
;; From http://stackoverflow.com/questions/18812938/copy-full-file-path-into-copy-paste-clipboard

(defun clip-file ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
		      (file-name-directory default-directory)
		    (buffer-file-name))))
    (when filename
      (x-select-text filename))))

;; from http://stackoverflow.com/questions/2416655/file-path-to-clipboard-in-emacs

(defun put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
		      default-directory
		    (buffer-file-name))))
    (when filename
      (with-temp-buffer
	(insert filename)
	(clipboard-kill-region (point-min) (point-max)))
      (message filename))))

(define-key (current-global-map) "\C-c\C-b"     'put-file-name-on-clipboard)
(define-key (current-global-map) "\C-\M-b"       'put-file-name-on-clipboard) ;; Alternative definition because \C-c\C-c\C-b is defined already in LaTeX and Markdown modes

;;; From http://www.emacswiki.org/emacs/UnfillParagraph
;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max)))
    (fill-paragraph nil region)))

;; Handy key definition
(define-key global-map "\M-Q" 'unfill-paragraph)

(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode"
  "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

;; Useful function defined in https://stackoverflow.com/questions/24356401/how-to-append-multiple-elements-to-a-list-in-emacs-lisp
(defun append-to-list (list-var elements)
  "Append ELEMENTS to the end of LIST-VAR.

The return value is the new value of LIST-VAR."
  (unless (consp elements)
    (error "ELEMENTS must be a list"))
  (let ((list (symbol-value list-var)))
    (if list
        (setcdr (last list) elements)
      (set list-var elements)))
  (symbol-value list-var))

;; Make sure auctex and preview-latex are loaded whenever emacs gets launched, so that customizations below can be done
(load "auctex.el" nil t t)
;; (load "preview-latex.el" nil t t)

(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-latex-mode t)

(load "auctex.el" nil t t)
(load "preview.el" nil t t)
;; Prevent annoying requirement to choose BibTeX over Biber every time
(eval-after-load "tex-mode" 
   '(setq TeX-command-list
 	 (remove '("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber")
 		 TeX-command-list)))

                 
