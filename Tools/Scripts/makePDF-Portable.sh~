#!/bin/bash

if [ $# -ne 3 ]
then
  echo "usage:   ${0##*/} <path> <fileName> public|private"
  echo "example: ${0##*/} /Methods/Data/Topics/NumericalMethods/SolvingMicroDSOPs/Latest/LaTeX SolvingMicroDSOPs private" # to create private version
  echo "example: ${0##*/} /Methods/Data/Topics/NumericalMethods/SolvingMicroDSOPs/Latest/LaTeX SolvingMicroDSOPs public"  # to create public version stripping private stuff
  exit 1
fi

pathName=$1
textName=$2
PubOrPri=$3

toolRoot=/Methods/Tools/Scripts

echo {{{ Starting $toolRoot/${0##*/} $pathName $textName $PubOrPri
echo Compiling files in $textName-Pri and $textName-Pub
echo cd $pathName
     cd $pathName

# If a .bib file exists, it shouldn't; delete and make an empty one
if [ -e $textName.bib ] 
  then rm $textName.bib
fi
touch $textName.bib

echo pwd 
echo `pwd`

# Include econtex and handout style and class files for portability
rm -f ./ReadMe.texmf # To prevent uninteresting 'file is already there' error message
echo cp `kpsewhich ReadMe.texmf`         ./ReadMe.texmf
     cp `kpsewhich ReadMe.texmf`         ./ReadMe.texmf
echo cp `kpsewhich econtex.cls`          ./econtex.cls
     cp `kpsewhich econtex.cls`          ./econtex.cls
echo cp `kpsewhich ReadMe.texmf`         ./ReadMe.texmf
     cp `kpsewhich ReadMe.texmf`         ./ReadMe.texmf
echo cp `kpsewhich econtex.bst`          ./econtex.bst
     cp `kpsewhich econtex.bst`          ./econtex.bst
echo cp `kpsewhich econtex.sty`          ./econtex.sty
     cp `kpsewhich econtex.sty`          ./econtex.sty
echo cp `kpsewhich econtexSetup.sty`     ./econtexSetup.sty
     cp `kpsewhich econtexSetup.sty`     ./econtexSetup.sty
echo cp `kpsewhich econtexShortcuts.sty`     ./econtexShortcuts.sty
     cp `kpsewhich econtexShortcuts.sty`     ./econtexShortcuts.sty
echo cp `kpsewhich econtexBibMake.tex`   ./econtexBibMake.tex
     cp `kpsewhich econtexBibMake.tex`   ./econtexBibMake.tex
echo cp `kpsewhich handout.cls`          ./handout.cls
     cp `kpsewhich handout.cls`          ./handout.cls
echo cp `kpsewhich handout.bst`          ./handout.bst
     cp `kpsewhich handout.bst`          ./handout.bst
echo cp `kpsewhich handout.sty`          ./handout.sty
     cp `kpsewhich handout.sty`          ./handout.sty
echo cp `kpsewhich handoutSetup.sty`     ./handoutSetup.sty
     cp `kpsewhich handoutSetup.sty`     ./handoutSetup.sty
echo cp `kpsewhich handoutShortcuts.sty`     ./handoutShortcuts.sty
     cp `kpsewhich handoutShortcuts.sty`     ./handoutShortcuts.sty
echo cp `kpsewhich handoutBibMake.tex`   ./handoutBibMake.tex
     cp `kpsewhich handoutBibMake.tex`   ./handoutBibMake.tex

# If local economics.bib file exists, delete it so that system default version will be used
if [ -f economics.bib ] 
  then rm economics.bib
fi

if [ -f $textName.bib ] 
  then rm $textName.bib
fi

if [ $PubOrPri == "public" ];
  then
        echo "Removing private components from $f"
        echo "  -- First remove material between begin{CDCPrivate} and end{CDCPrivate} delimiters"
        echo "  -- Next remove any line that contains the string CDCPrivate"
        echo '  -- Then remove any lines containing two %% signs in a row'
  for f in $(find . -name '*.tex')
  do
        sed '/begin{CDCPrivate}/,/end{CDCPrivate}/d' $f > $f-tmp
        grep -v CDCPrivate $f-tmp > $f-tmp2
        sed '/%%/d' $f-tmp2 > $f
        rm $f-tmp $f-tmp2
  done
fi

if [ ! -e $textName.tex ]; then 
  echo `pwd`/$textName.tex does not exist.  Halting ${0##*/}.
  exit 1
fi
echo pdflatex -halt-on-error --shell-escape \'\\newcommand\\UseOption\{PrintGeom,FromShell\}\\input\{\'$textName\'} ' 1> /dev/null '
     pdflatex -halt-on-error --shell-escape  "\newcommand\UseOption{PrintGeom,FromShell}\input{$textName}"  1> /dev/null
[[ $? -eq 1 ]] && pdflatex -halt-on-error --shell-escape  "\newcommand\UseOption{PrintGeom,FromShell}\input{$textName}"   # If there was an error then rerun in such a way as to halt at the error
bibtex -terse    $textName
echo pdflatex -halt-on-error --shell-escape \'\\newcommand\\UseOption\{PrintGeom,FromShell\}\\input\{\'$textName\'} ' 1> /dev/null '
     pdflatex -halt-on-error --shell-escape "\newcommand\UseOption{PrintGeom,FromShell}\input{$textName}"  1> /dev/null
[[ $? -eq 1 ]] && pdflatex   --shell-escape "\newcommand\UseOption{PrintGeom,FromShell}\input{$textName}"
pdflatex -halt-on-error    --shell-escape "\newcommand\UseOption{PrintGeom,FromShell}\input{$textName}"  1> /dev/null
[[ $? -eq 1 ]] && pdflatex --shell-escape "\newcommand\UseOption{PrintGeom,FromShell}\input{$textName}"
echo pdflatex -halt-on-error --shell-escape \'\\newcommand\\UseOption\{PrintGeom,FromShell\}\\input\{\'$textName\'} ' 1> /dev/null '
pdflatex -halt-on-error    --shell-escape "\newcommand\UseOption{PrintGeom,FromShell}\input{$textName}"  1> /dev/null
[[ $? -eq 1 ]] && pdflatex --shell-escape "\newcommand\UseOption{PrintGeom,FromShell}\input{$textName}" 1> /dev/null

# Create local bibliography file that contains only the cited references
bibexport -o $textName.bib $textName
rm -f *-save-*

# Create a bib file that contains only the preferred citation information to be made publicly available about the paper 
if [ -e $textName.bibkey ]; then # the bibkey must be expressly created by the author to identify the preferred entry to extract from  economics.bib; without it no $textName.bib file is created in the top level directory
    echo ''
    echo 'Now using bibtool to get reference for the paper from economics.bib'
    echo ''
    echo 'Creating '$textName.bib file
    textNameKey=`cat $textName.bibkey`
    pushd . ; cd .. ; /Methods/Tools/Scripts/bibtoolGet.sh $textNameKey > $textName.bib ; popd 
fi


# Create empty economics.bib so file will compile without complaint
if [ ! -f economics.bib    ]; then touch economics.bib   ; fi

cd $pathName/..

ln -fs ./LaTeX/$textName.pdf ./$textName.pdf
open   ./$textName.pdf

echo Starting $toolRoot/${0##*/} $pathName $textName $PubOrPri Finishing }}}
